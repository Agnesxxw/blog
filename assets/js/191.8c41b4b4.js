(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{751:function(_,v,t){"use strict";t.r(v);var s=t(12),a=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"什么是异地多活？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是异地多活？"}},[_._v("#")]),_._v(" 什么是异地多活？")]),_._v(" "),t("p",[_._v("“异地”指的是不同的地理位置；“多活”指的是不同地理位置上的系统都能对外提供服务。")]),_._v(" "),t("p",[t("strong",[_._v("根据地理距离来划分，分为同城异区、跨城异地、跨国异地")]),_._v("。硬件成本高，设计难度大，如果业务中断对用户影响不大，尽量避免异地多活。")]),_._v(" "),t("p",[_._v("异地会导致数据不一致，因为网络传输有延迟。所以对于强一致性要求的数据，例如银行存款、支付宝余额，一般只做同城异区架构。")]),_._v(" "),t("h2",{attrs:{id:"_3-种异地多活架构的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-种异地多活架构的特点"}},[_._v("#")]),_._v(" 3 种异地多活架构的特点")]),_._v(" "),t("ul",[t("li",[_._v("同城异区：搭建高速网络连接机房，类似本地机房。设计上当作本地机房，无需额外考虑。")]),_._v(" "),t("li",[t("strong",[_._v("跨城异地：难点在于数据不一致，要考虑业务是否合适")]),_._v("。")]),_._v(" "),t("li",[_._v("跨国异地：面向不同地区用户，或者提供只读业务，反而对架构设计要求不高。")])]),_._v(" "),t("h2",{attrs:{id:"跨城异地的技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨城异地的技巧"}},[_._v("#")]),_._v(" 跨城异地的技巧")]),_._v(" "),t("p",[_._v("1、保证核心业务的异地多活")]),_._v(" "),t("p",[_._v("2、保证核心数据最终一致性")]),_._v(" "),t("p",[_._v("3、使用多种同步手段")]),_._v(" "),t("ul",[t("li",[_._v("消息队列：例如账号数据只会创建，没有删除和修改")]),_._v(" "),t("li",[_._v("二次读取：用户在 A 中心注册，访问 B 中心业务没有数据。B 读取失败后，根据路由访问 A 中心")]),_._v(" "),t("li",[_._v("回源读取：用户在 B 登录，发现数据属于 A 中心，之后用户直接访问 A 中心即可")]),_._v(" "),t("li",[_._v("存储系统同步：Mysql 数据库自带。有延迟，但是例如密码，很少 10s 内多次修改密码")]),_._v(" "),t("li",[_._v("重新生成：本中心没有，其他中心挂掉或者延迟，则本中心重新生成（例如 session）")])]),_._v(" "),t("p",[_._v("核心是：没法面面俱到，分清主次，再做取舍。")])])}),[],!1,null,null,null);v.default=a.exports}}]);