(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{736:function(t,a,v){"use strict";v.r(a);var _=v(12),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"高性能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高性能"}},[t._v("#")]),t._v(" 高性能")]),t._v(" "),v("p",[t._v("分为 2 部分：单机和集群。")]),t._v(" "),v("h3",{attrs:{id:"单机复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单机复杂度"}},[t._v("#")]),t._v(" 单机复杂度")]),t._v(" "),v("p",[t._v("对于单机来说，直接相关的是进程和线程。")]),t._v(" "),v("p",[t._v("用进程来对应一个任务，每个任务都有自己独立的内存空间，进程间互不相关，由操作系统来进行调度。为了达到多进程并行运行的目的，采取了分时的方式，即把 CPU 的时间分成很多片段，每个片段只能执行某个进程中的指令。")]),t._v(" "),v("p",[t._v("线程是进程内部的子任务，但这些子任务都共享同一份进程数据。为了保证数据的正确性，又发明了互斥锁机制。")]),t._v(" "),v("h3",{attrs:{id:"集群复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集群复杂度"}},[t._v("#")]),t._v(" 集群复杂度")]),t._v(" "),v("h4",{attrs:{id:"任务分配"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#任务分配"}},[t._v("#")]),t._v(" 任务分配")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlgy1gh6mu0hw3dj30pu0ic0to.jpg",alt:""}})]),t._v(" "),v("p",[t._v("体现在 3 个方面：任务分配器、连接、分配器需要增加分配算法")]),t._v(" "),v("p",[t._v("随着书来给你增加，任务分配器本身又成为瓶颈。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlgy1gh6muavu5gj30ys0jidhf.jpg",alt:""}})]),t._v(" "),v("h4",{attrs:{id:"任务分解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#任务分解"}},[t._v("#")]),t._v(" 任务分解")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlgy1gh6murp2smj30y00i6dh9.jpg",alt:""}})]),t._v(" "),v("h2",{attrs:{id:"高可用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[t._v("#")]),t._v(" 高可用")]),t._v(" "),v("blockquote",[v("p",[t._v("系统无中断地执行其功能的能力，代表系统的可用性程度")])]),t._v(" "),v("p",[t._v("本质上通过“增加冗余”来实现高可用。高性能增加机器目的在于“扩展”处理性能；高可用增加机器目的在于“冗余”处理单元。")]),t._v(" "),v("p",[v("strong",[t._v("1、计算高可用")])]),t._v(" "),v("p",[t._v("计算有一个特点就是无论在哪台机器上进行计算，同样的算法和输入数据，产出的结果都是一样的。（无状态）")]),t._v(" "),v("p",[v("strong",[t._v("2、存储高于可用")])]),t._v(" "),v("p",[t._v("将数据在机器间同步，需要时间。造成数据延迟，结果不通。存储高可用的难点不在于如何备份数据，而"),v("strong",[t._v("在于如何减少或者规避数据不一致对业务造成的影响")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"高可用状态决策"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高可用状态决策"}},[t._v("#")]),t._v(" 高可用状态决策")]),t._v(" "),v("p",[t._v("无论是计算高可用还是存储高可用，其基础都是“状态决策”，即系统需要能够判断当前的状态是正常还是异常。")]),t._v(" "),v("p",[v("strong",[t._v("1、独裁式")])]),t._v(" "),v("p",[t._v("只有一个决策者，不会决策混乱。但是决策者本身不可故障。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlgy1gh6mv319uaj30lk0e8aaq.jpg",alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("2、协商式")])]),t._v(" "),v("p",[t._v("常用的是主备决策。")]),t._v(" "),v("p",[t._v("过程：")]),t._v(" "),v("ul",[v("li",[t._v("2 台服务器启动时都是备机。")]),t._v(" "),v("li",[t._v("2 台服务器建立连接。")]),t._v(" "),v("li",[t._v("2 台服务器交换状态信息。")]),t._v(" "),v("li",[t._v("某 1 台服务器做出决策，成为主机；另一台服务器继续保持备机身份。")])]),t._v(" "),v("p",[t._v("难点在于如果二者信息交换出现问题，怎么进行决策")]),t._v(" "),v("p",[v("strong",[t._v("3、民主式")])]),t._v(" "),v("p",[t._v("少数服从多数，例如 ZooKeeper。民主式决策的系统一般都采用“投票节点数必须超过系统总节点数一半”规则来处理“脑裂”。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlgy1gh6mvau11yj30ue0b6dh8.jpg",alt:""}})]),t._v(" "),v("h2",{attrs:{id:"可扩展性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可扩展性"}},[t._v("#")]),t._v(" 可扩展性")]),t._v(" "),v("blockquote",[v("p",[t._v("可扩展性指系统为了应对将来需求变化而提供的一种扩展能力，"),v("strong",[t._v("当有新的需求出现时，系统不需要或者仅需要少量修改就可以支持，无须整个系统重构或者重建")]),t._v("。")])]),t._v(" "),v("p",[t._v("需要做到：正确预测变化、尽量封装变化。")]),t._v(" "),v("h2",{attrs:{id:"参考链接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://time.geekbang.org/column/article/6354",target:"_blank",rel:"noopener noreferrer"}},[t._v("极客时间：从 0 学架构"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);