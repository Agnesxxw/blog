(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{738:function(_,v,t){"use strict";t.r(v);var r=t(12),a=Object(r.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"原则与步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原则与步骤"}},[_._v("#")]),_._v(" 原则与步骤")]),_._v(" "),t("p",[_._v("3 个原则：合适、简单、演化。其中，合适最重要，避免过度设计。")]),_._v(" "),t("p",[_._v("步骤上：")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("根据场景，识别设计复杂度所在。多个复杂度，需要按照优先级排序。")])])]),_._v(" "),t("li",[t("p",[_._v("针对复杂度设计备选方案")])]),_._v(" "),t("li",[t("p",[_._v("挑选合适方案")])]),_._v(" "),t("li",[t("p",[_._v("深入详细设计")])])]),_._v(" "),t("h2",{attrs:{id:"场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[_._v("#")]),_._v(" 场景")]),_._v(" "),t("p",[_._v("用户发一条微博后，微博子系统需要通知审核子系统进行审核，然后通知统计子系统进行统计，再通知广告子系统进行广告预测，接着通知消息子系统进行消息推送……一条微博有十几个通知，目前都是系统间通过接口调用的。每通知一个新系统，微博子系统就要设计接口、进行测试，效率很低，问题定位很麻烦，经常和其他子系统的技术人员产生分岐，微博子系统的开发人员不胜其烦。")]),_._v(" "),t("p",[_._v("用户等级达到 VIP 后，等级子系统要通知福利子系统进行奖品发放，要通知客服子系统安排专属服务人员，要通知商品子系统进行商品打折处理……等级子系统的开发人员也是不胜其烦。")]),_._v(" "),t("p",[t("strong",[_._v("问题在于：各业务子系统强耦合，使用消息队列可以对子系统解耦。")])]),_._v(" "),t("p",[_._v("这个消息队列：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("高性能：业务会增长，需要考虑性能余量")])]),_._v(" "),t("li",[t("p",[_._v("高可用：很重要，vip 体验、言论安全等等")])]),_._v(" "),t("li",[t("p",[_._v("可扩展：要求不高")])])]),_._v(" "),t("h2",{attrs:{id:"几种方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#几种方案"}},[_._v("#")]),_._v(" 几种方案")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("开源消息队列：Kafka")])]),_._v(" "),t("li",[t("p",[_._v("基于 sql 存储：集群+mysql")])]),_._v(" "),t("li",[t("p",[_._v("基于自研存储：集群+自研存储")])])]),_._v(" "),t("h2",{attrs:{id:"方案细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案细节"}},[_._v("#")]),_._v(" 方案细节")]),_._v(" "),t("p",[_._v("考虑到 kafka 是针对大容量日志消息传输，而系统关键点是业务数据高可用传输。并且运维难度高，所以排除。")]),_._v(" "),t("p",[_._v("自研存储人力不够。")]),_._v(" "),t("p",[_._v("最后选择方案 2。")]),_._v(" "),t("p",[_._v("细节部分：")]),_._v(" "),t("p",[_._v("1、 数据表设计：日志表+消息表，定时清除")]),_._v(" "),t("p",[_._v("2、数据复制：mysql 自带的主从复制，只复制消息表。")]),_._v(" "),t("p",[_._v("3、主备转换：ZooKeeper 做主备决策")]),_._v(" "),t("p",[_._v("4、业务写入消息：提供 sdk，简单轮询（不行就下一个节点）写入")]),_._v(" "),t("p",[_._v("5、业务读取消息：sdk 读取，消息服务器需要记录消费状态，自动返回下一条未消费的消息")]),_._v(" "),t("p",[_._v("6、通信协议：传输 tcp（兼容性），数据格式用 protoco buf（压缩效率高）")]),_._v(" "),t("h2",{attrs:{id:"更多细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更多细节"}},[_._v("#")]),_._v(" 更多细节")]),_._v(" "),t("p",[_._v("1、消息消费采用 pull 还是 push？")]),_._v(" "),t("p",[_._v("考虑 push 模式会更复杂，故放弃，采用 pull 模式，消费端主动去拉，为了达到与 push 模式相同的低延迟效果，可以采用长轮询的方式，消费端轮询拉取消息费，当有消费可消费时，返回消息，如果没有可消费的消息，挂起当前线程，直到超时或者有可消费的消息为止。")]),_._v(" "),t("p",[_._v("2、消息重复问题")]),_._v(" "),t("p",[_._v("消息中间件不解决消息重复的问题，有业务系统自己根据业务的唯一 id 去重。")]),_._v(" "),t("p",[_._v("3、顺序消息")]),_._v(" "),t("p",[_._v("发送端在发生顺序消息时，只发送到相同 broker 的相同队列，消费端消费时，顺序消息只能由同一个消费端消息。")]),_._v(" "),t("p",[_._v("4、定时消息")]),_._v(" "),t("p",[_._v("发送端指定消息延时多长时间消费，broker 端定时扫描定时消息（涉及时间轮算法），达到延时时间的消息加入到消费队列。")]),_._v(" "),t("p",[_._v("5、事务消息")]),_._v(" "),t("p",[_._v("发送端分两步，先预发送消息，broker 端只记录消息为预发送状态，再执行本地事务，然后再根据本地事务的成功或者失败发送确认消息（回滚还是提交），这步如果发生异常，broker 启动定时任务，把未确认的消息发送给发送端回查事务状态（需要发送端提供回查接口）。")]),_._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[_._v("#")]),_._v(" 参考")]),_._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/6354",target:"_blank",rel:"noopener noreferrer"}},[_._v("极客时间：从 0 学架构"),t("OutboundLink")],1)])]),_._v(" "),t("li",[t("p",[_._v("[轮询、长轮询、长连接、ws]("),t("a",{attrs:{href:"https://www.cnblogs.com/huchong/p/8595644.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://www.cnblogs.com/huchong/p/8595644.html"),t("OutboundLink")],1),_._v("]")])]),_._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://caibaojian.com/http-connection-and-websocket.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("长连接和短连接"),t("OutboundLink")],1)])])])])}),[],!1,null,null,null);v.default=a.exports}}]);